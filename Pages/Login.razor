
@page "/"
@layout LoginLayout
@inject IUsuario usuario
@inject IJSRuntime Js
@inject NavigationManager NavigationManager



<MudText Typo="Typo.h4" GutterBottom="true">Iniciar Sección</MudText>

<MudTextField  @bind-Value="@user" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />


<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="BuscarDatos" Size="Size.Large" FullWidth="true" Class="mt-5">Sign In</MudButton>

@*<button Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" Class="mt-5" @onclick="BuscarDatos">Sign In</button>*@
@code {

    UsuariosDb oUsuario = new UsuariosDb();

    string user { get; set; } = "";
    string Password { get; set; } = "";

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }

    }


    public void BuscarDatos()
    {
        oUsuario.user_ = user;
        oUsuario.pass = Password;

        var validar = usuario.SearchUsuario(oUsuario);
        if (!validar)
        {
            var msj = Js.InvokeAsync<object>("msjAlert", "Usuario Incorrecto", "error");
        }

        else
        {
            var msj = Js.InvokeAsync<object>("msjAlert", "Sección Iniciada", "success");
            NavigationManager.NavigateTo("/Index");
        }

    }


}