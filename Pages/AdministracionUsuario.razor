@page "/administrarUsuario"
@inject IUsuario usuarios
@inject NavigationManager NavigationManager
@inject IJSRuntime js

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Administración de Usuarios</MudText>
<MudTabs Elevation="25" Color="Color.Transparent" Rounded="true" PanelClass="mt-6">
    <MudTabPanel Text="General">
            <div class="row justify-content-center mt-md-2">
                <div class="col-8">
                    <MudTable Items="@lsUsuario" Hover="true" Breakpoint="Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh>Id</MudTh>
                            <MudTh>Usuario</MudTh>
                            <MudTh>Estado</MudTh>
                            <MudTh>Acción</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Id">@context.id</MudTd>
                            <MudTd DataLabel="Cliente">@context.user_</MudTd>
                            <MudTd DataLabel="">
                              @if(context.estado == 0){
                                <MudChip Label="true" Color="Color.Error" Size="Size.Small" Class="ml-auto mud-elevation-25">Inactivo</MudChip>
                              }else{
                                <MudChip Label="true" Color="Color.Success" Size="Size.Small" Class="ml-auto mud-elevation-25">Activo</MudChip>
                              }
                            </MudTd>
                            <MudTd DataLabel="Acción">
                                @* <a href="/registrarcliente/editar/@context.id" class="btn btn-primary"><i class="oi oi-pencil"></i></a> *@
                                <button class="btn btn-danger" @onclick="(() => Delete(context.id))"><i class="oi oi-trash"></i></button>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </div>
    </MudTabPanel>
    <MudTabPanel Text="Seguridad">
        <div class="row justify-content-center mt-md-2">
            <div class="col-4">
                <EditForm Model="oUsuario" OnValidSubmit="(() => GuardarDatos())">
                    <DataAnnotationsValidator/>
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Credenciales</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudTextField T="string" @bind-Value="oUsuario.user_" Label="Usuario" Variant="Variant.Outlined" />
                                    <ValidationMessage For="() => oUsuario.user_"/>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField T="string" @bind-Value="oUsuario.pass" Label="Contraseña" Variant="Variant.Outlined" InputType="InputType.Password" @ref="pwField1" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true" RequiredError="Se requiere contreseña!" />
                                    <ValidationMessage For="() => oUsuario.pass"/>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField T="string" Label="Confimar Contraseña" Variant="Variant.Outlined" InputType="InputType.Password" Validation="@(new Func<string, string>(PasswordMatch))" />
                                    <ValidationMessage For="() => oUsuario.pass"/>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <div class="row justify-content-center">
                            <button type="submit" class="btn btn-outline-primary col-8 bn-lg mb-4">Guardar</button>
                        </div>
                    </MudCard>
                </EditForm>
            </div>
        </div> 
    </MudTabPanel>
</MudTabs>


@code{
    public bool loading = false, error = false;
    Usuario oUsuario = new Usuario();
    List<Usuario> lsUsuario = new List<Usuario>(); 
    MudTextField<string> pwField1;

    protected async override Task OnInitializedAsync(){
        lsUsuario = await usuarios.GetUsuarios();
    }

    

    private async Task GuardarDatos(){
        if(!error){
            await usuarios.AddUsuarios(oUsuario);
            var msj = js.InvokeAsync<object>("msjAlert", "Registro Existo", "success");
                NavigationManager.NavigateTo("/administrarUsuario", true);
        }
    }

    private async Task Delete(int id){
        var confimacion = await js.InvokeAsync<bool>("msjConfim", "Confimar", "Seguro de borrar el Usuario?", "question");
        if(confimacion){
            await usuarios.DeleteUsuario(id);
            await js.InvokeAsync<object>("msjAlert", "Eliminación Exitosa", "success");
            lsUsuario = await usuarios.GetUsuarios();

        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Se requiere contraseña!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "La contraseña debe tener al menos una longitud de 8";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg){
            error = true;
            return "Las contraseñas no coinciden";
        }else{
            error = false;
        }
            
        return null;
    } 

}  